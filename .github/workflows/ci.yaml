name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  REGISTRY: docker.io
  API_IMAGE: dsmann12/recall-api
  WEB_IMAGE: dsmann12/recall-web

jobs:
  build:
    name: Build Images
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [api, web]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ matrix.service == 'api' && env.API_IMAGE || env.WEB_IMAGE }}
          tags: |
            type=sha,prefix=sha-,format=short

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: ./${{ matrix.service }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          cache-from: type=registry,ref=${{ matrix.service == 'api' && env.API_IMAGE || env.WEB_IMAGE }}:buildcache
          cache-to: type=registry,ref=${{ matrix.service == 'api' && env.API_IMAGE || env.WEB_IMAGE }}:buildcache,mode=max

  test-api:
    name: Test API
    runs-on: ubuntu-latest
    needs: build
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Pull and run API container
        run: |
          docker pull ${{ env.API_IMAGE }}:sha-${GITHUB_SHA::7}
          docker run -d -p 8000:8000 --name recall-api \
            ${{ env.API_IMAGE }}:sha-${GITHUB_SHA::7}
          
          # Wait for API to be ready
          timeout 30 bash -c 'until curl -f http://localhost:8000/health > /dev/null 2>&1; do sleep 1; done'

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: api/pyproject.toml

      - name: Install test dependencies
        run: |
          cd api
          pip install httpx pytest

      - name: Run smoke tests
        env:
          ACCEPTANCE_TEST_API_URL: http://localhost:8000
        run: |
          cd api
          pytest tests/smoke/

      - name: Stop container
        if: always()
        run: |
          docker stop recall-api || true
          docker rm recall-api || true

  test-web:
    name: Test Web
    runs-on: ubuntu-latest
    needs: build
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Pull and run Web container
        run: |
          docker pull ${{ env.WEB_IMAGE }}:sha-${GITHUB_SHA::7}
          docker run -d -p 3000:80 --name recall-web \
            ${{ env.WEB_IMAGE }}:sha-${GITHUB_SHA::7}
          sleep 5

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: web/package-lock.json

      # Set network to host so Playwright container can access the web
      # container. Run tests in playwright container to avoid downloading
      # and installing browser dependencies in the main workflow.
      - name: Run Playwright tests in container
        run: |
          docker run --rm \
            --network host \
            -v ${{ github.workspace }}/web:/work \
            -w /work \
            -e PLAYWRIGHT_BASE_URL=http://localhost:3000 \
            mcr.microsoft.com/playwright:v1.56.1 \
            /bin/bash -c "npm ci && npx playwright test"

      - name: Upload Playwright report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: web/playwright-report/
          retention-days: 7

      - name: Stop container
        if: always()
        run: |
          docker stop recall-web || true
          docker rm recall-web || true

  deploy:
    name: Deploy Images
    runs-on: ubuntu-latest
    needs: [test-api, test-web]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    strategy:
      matrix:
        service: [api, web]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Pull build image
        run: |
          docker pull ${{ matrix.service == 'api' && env.API_IMAGE || env.WEB_IMAGE }}:sha-${GITHUB_SHA::7}

      - name: Tag and push production tags
        run: |
          IMAGE=${{ matrix.service == 'api' && env.API_IMAGE || env.WEB_IMAGE }}
          docker tag ${IMAGE}:sha-${GITHUB_SHA::7} ${IMAGE}:latest
          docker tag ${IMAGE}:sha-${GITHUB_SHA::7} ${IMAGE}:0.1.0
          docker push ${IMAGE}:latest
          docker push ${IMAGE}:0.1.0